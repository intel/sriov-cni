diff --git a/pkg/kubelet/apis/deviceplugin/v1alpha/api.pb.go b/pkg/kubelet/apis/deviceplugin/v1alpha/api.pb.go
index 75fbbfe..d6e3a13 100644
--- a/pkg/kubelet/apis/deviceplugin/v1alpha/api.pb.go
+++ b/pkg/kubelet/apis/deviceplugin/v1alpha/api.pb.go
@@ -163,6 +163,8 @@ func (m *Device) GetHealth() string {
 //   the Devices requested
 type AllocateRequest struct {
 	DevicesIDs []string `protobuf:"bytes,1,rep,name=devicesIDs" json:"devicesIDs,omitempty"`
+	PodUID     string   `protobuf:"bytes,2,opt,name=podUID,proto3" json:"podUID,omitempty"`
+	ContName   string   `protobuf:"bytes,3,opt,name=contName,proto3" json:"contName,omitempty"`
 }
 
 func (m *AllocateRequest) Reset()                    { *m = AllocateRequest{} }
@@ -176,6 +178,20 @@ func (m *AllocateRequest) GetDevicesIDs() []string {
 	return nil
 }
 
+func (m *AllocateRequest) GetPodUID() string {
+	if m != nil {
+		return m.PodUID
+	}
+	return ""
+}
+
+func (m *AllocateRequest) GetContName() string {
+	if m != nil {
+		return m.ContName
+	}
+	return ""
+}
+
 // AllocateResponse includes the artifacts that needs to be injected into
 // a container for accessing 'deviceIDs' that were mentioned as part of
 // 'AllocateRequest'.
@@ -665,6 +681,18 @@ func (m *AllocateRequest) MarshalTo(dAtA []byte) (int, error) {
 			i += copy(dAtA[i:], s)
 		}
 	}
+	if len(m.PodUID) > 0 {
+		dAtA[i] = 0x12
+		i++
+		i = encodeVarintApi(dAtA, i, uint64(len(m.PodUID)))
+		i += copy(dAtA[i:], m.PodUID)
+	}
+	if len(m.ContName) > 0 {
+		dAtA[i] = 0x1a
+		i++
+		i = encodeVarintApi(dAtA, i, uint64(len(m.ContName)))
+		i += copy(dAtA[i:], m.ContName)
+	}
 	return i, nil
 }
 
@@ -906,6 +934,14 @@ func (m *AllocateRequest) Size() (n int) {
 			n += 1 + l + sovApi(uint64(l))
 		}
 	}
+	l = len(m.PodUID)
+	if l > 0 {
+		n += 1 + l + sovApi(uint64(l))
+	}
+	l = len(m.ContName)
+	if l > 0 {
+		n += 1 + l + sovApi(uint64(l))
+	}
 	return n
 }
 
@@ -1039,6 +1075,8 @@ func (this *AllocateRequest) String() string {
 	}
 	s := strings.Join([]string{`&AllocateRequest{`,
 		`DevicesIDs:` + fmt.Sprintf("%v", this.DevicesIDs) + `,`,
+		`PodUID:` + fmt.Sprintf("%v", this.PodUID) + `,`,
+		`ContName:` + fmt.Sprintf("%v", this.ContName) + `,`,
 		`}`,
 	}, "")
 	return s
@@ -1542,6 +1580,64 @@ func (m *AllocateRequest) Unmarshal(dAtA []byte) error {
 			}
 			m.DevicesIDs = append(m.DevicesIDs, string(dAtA[iNdEx:postIndex]))
 			iNdEx = postIndex
+		case 2:
+			if wireType != 2 {
+				return fmt.Errorf("proto: wrong wireType = %d for field PodUID", wireType)
+			}
+			var stringLen uint64
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowApi
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				stringLen |= (uint64(b) & 0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+			intStringLen := int(stringLen)
+			if intStringLen < 0 {
+				return ErrInvalidLengthApi
+			}
+			postIndex := iNdEx + intStringLen
+			if postIndex > l {
+				return io.ErrUnexpectedEOF
+			}
+			m.PodUID = string(dAtA[iNdEx:postIndex])
+			iNdEx = postIndex
+		case 3:
+			if wireType != 2 {
+				return fmt.Errorf("proto: wrong wireType = %d for field ContName", wireType)
+			}
+			var stringLen uint64
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowApi
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				stringLen |= (uint64(b) & 0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+			intStringLen := int(stringLen)
+			if intStringLen < 0 {
+				return ErrInvalidLengthApi
+			}
+			postIndex := iNdEx + intStringLen
+			if postIndex > l {
+				return io.ErrUnexpectedEOF
+			}
+			m.ContName = string(dAtA[iNdEx:postIndex])
+			iNdEx = postIndex
 		default:
 			iNdEx = preIndex
 			skippy, err := skipApi(dAtA[iNdEx:])
@@ -2280,43 +2376,44 @@ var (
 func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }
 
 var fileDescriptorApi = []byte{
-	// 594 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x8b, 0xd3, 0x40,
-	0x14, 0x6d, 0xd2, 0xdd, 0x6e, 0x7b, 0xdb, 0xdd, 0x2d, 0x63, 0x91, 0x10, 0x35, 0x94, 0x88, 0x50,
-	0x10, 0xd3, 0xb5, 0x3e, 0x28, 0x22, 0x62, 0xa5, 0x15, 0x96, 0xf5, 0xa3, 0xc6, 0x07, 0x1f, 0xcb,
-	0x34, 0x1d, 0x9b, 0xc1, 0x64, 0x26, 0x66, 0x26, 0x85, 0xbe, 0xf9, 0x13, 0xfc, 0x19, 0xfe, 0x94,
-	0x7d, 0xf4, 0xd1, 0x47, 0xb7, 0xfe, 0x0e, 0x41, 0x3a, 0x49, 0xfa, 0x11, 0x8a, 0x22, 0xf8, 0x96,
-	0x7b, 0xe6, 0x9e, 0xc9, 0xb9, 0x27, 0xf7, 0x04, 0x6a, 0x38, 0xa2, 0x4e, 0x14, 0x73, 0xc9, 0x51,
-	0x63, 0x4a, 0xe6, 0xd4, 0x23, 0x51, 0x90, 0xcc, 0x28, 0x33, 0xef, 0xcd, 0xa8, 0xf4, 0x93, 0x89,
-	0xe3, 0xf1, 0xb0, 0x3b, 0xe3, 0x33, 0xde, 0x55, 0x4d, 0x93, 0xe4, 0x83, 0xaa, 0x54, 0xa1, 0x9e,
-	0x52, 0xb2, 0x1d, 0xc0, 0xa9, 0x4b, 0x66, 0x54, 0x48, 0x12, 0xbb, 0xe4, 0x53, 0x42, 0x84, 0x44,
-	0x06, 0x1c, 0xcd, 0x49, 0x2c, 0x28, 0x67, 0x86, 0xd6, 0xd6, 0x3a, 0x35, 0x37, 0x2f, 0x91, 0x09,
-	0x55, 0xc2, 0xa6, 0x11, 0xa7, 0x4c, 0x1a, 0xba, 0x3a, 0x5a, 0xd7, 0xe8, 0x36, 0x1c, 0xc7, 0x44,
-	0xf0, 0x24, 0xf6, 0xc8, 0x98, 0xe1, 0x90, 0x18, 0x65, 0xd5, 0xd0, 0xc8, 0xc1, 0xd7, 0x38, 0x24,
-	0xf6, 0x11, 0x1c, 0x0e, 0xc3, 0x48, 0x2e, 0xec, 0x17, 0xd0, 0x7a, 0x49, 0x85, 0xec, 0xb3, 0xe9,
-	0x7b, 0x2c, 0x3d, 0xdf, 0x25, 0x22, 0xe2, 0x4c, 0x10, 0xe4, 0xc0, 0x51, 0x3a, 0x8d, 0x30, 0xb4,
-	0x76, 0xb9, 0x53, 0xef, 0xb5, 0x9c, 0xed, 0xe9, 0x9c, 0x81, 0x2a, 0xdc, 0xbc, 0xc9, 0x3e, 0x83,
-	0x4a, 0x0a, 0xa1, 0x13, 0xd0, 0xcf, 0x07, 0x99, 0x60, 0x9d, 0x0e, 0xd0, 0x75, 0xa8, 0xf8, 0x04,
-	0x07, 0xd2, 0xcf, 0x94, 0x66, 0x95, 0x7d, 0x1f, 0x4e, 0xfb, 0x41, 0xc0, 0x3d, 0x2c, 0x49, 0x3e,
-	0xb0, 0x05, 0x90, 0xdd, 0x77, 0x3e, 0x48, 0xdf, 0x5b, 0x73, 0xb7, 0x10, 0xfb, 0x97, 0x0e, 0xcd,
-	0x0d, 0x27, 0x53, 0xfa, 0x04, 0x0e, 0x08, 0x9b, 0xe7, 0x32, 0x3b, 0xbb, 0x32, 0x8b, 0xdd, 0xce,
-	0x90, 0xcd, 0xc5, 0x90, 0xc9, 0x78, 0xe1, 0x2a, 0x16, 0xba, 0x0b, 0x95, 0x90, 0x27, 0x4c, 0x0a,
-	0x43, 0x57, 0xfc, 0x6b, 0xbb, 0xfc, 0x57, 0xab, 0x33, 0x37, 0x6b, 0x41, 0xbd, 0x8d, 0x29, 0x65,
-	0xd5, 0x6d, 0xec, 0x33, 0xe5, 0x5d, 0x44, 0xbc, 0xb5, 0x31, 0xe8, 0x2d, 0xd4, 0x31, 0x63, 0x5c,
-	0x62, 0x49, 0x39, 0x13, 0xc6, 0x81, 0xe2, 0x75, 0xff, 0xa2, 0xb2, 0xbf, 0x61, 0xa4, 0x62, 0xb7,
-	0xef, 0x30, 0x1f, 0x42, 0x6d, 0x3d, 0x06, 0x6a, 0x42, 0xf9, 0x23, 0x59, 0x64, 0x7e, 0xaf, 0x1e,
-	0x51, 0x0b, 0x0e, 0xe7, 0x38, 0x48, 0x48, 0xe6, 0x77, 0x5a, 0x3c, 0xd6, 0x1f, 0x69, 0xe6, 0x53,
-	0x68, 0x16, 0x6f, 0xfe, 0x17, 0xbe, 0xed, 0xc3, 0xa1, 0x32, 0x04, 0xdd, 0x81, 0x13, 0x8f, 0x33,
-	0x89, 0x29, 0x23, 0xf1, 0x38, 0xc2, 0xd2, 0xcf, 0xf8, 0xc7, 0x6b, 0x74, 0x84, 0xa5, 0x8f, 0x6e,
-	0x40, 0xcd, 0xe7, 0x42, 0xa6, 0x1d, 0xd9, 0x9e, 0xae, 0x80, 0xfc, 0x30, 0x26, 0x78, 0x3a, 0xe6,
-	0x2c, 0x58, 0xa8, 0x1d, 0xad, 0xba, 0xd5, 0x15, 0xf0, 0x86, 0x05, 0x0b, 0x3b, 0x06, 0xd8, 0x98,
-	0xf9, 0x5f, 0x5e, 0xd7, 0x86, 0x7a, 0x44, 0xe2, 0x90, 0x0a, 0xa1, 0xbe, 0x43, 0x1a, 0x8a, 0x6d,
-	0xa8, 0x37, 0x82, 0x46, 0x9a, 0xc0, 0x58, 0xf9, 0x83, 0x9e, 0x41, 0x35, 0x4f, 0x24, 0xba, 0xb5,
-	0xfb, 0xc1, 0x0a, 0x49, 0x35, 0x0b, 0x5b, 0x93, 0x46, 0xab, 0xd4, 0xfb, 0xaa, 0x41, 0x23, 0x1d,
-	0x63, 0xa4, 0x0e, 0xd0, 0x05, 0x34, 0xb6, 0xd3, 0x86, 0xf6, 0xf1, 0x4c, 0x7b, 0x17, 0xdc, 0x17,
-	0x4f, 0xbb, 0x74, 0xa6, 0xa1, 0x0b, 0xa8, 0xe6, 0x8b, 0x53, 0xd4, 0x57, 0x08, 0x96, 0x69, 0xfd,
-	0x79, 0xdf, 0xec, 0xd2, 0xf3, 0x9b, 0x97, 0x57, 0x96, 0xf6, 0xfd, 0xca, 0x2a, 0x7d, 0x5e, 0x5a,
-	0xda, 0xe5, 0xd2, 0xd2, 0xbe, 0x2d, 0x2d, 0xed, 0xc7, 0xd2, 0xd2, 0xbe, 0xfc, 0xb4, 0x4a, 0x93,
-	0x8a, 0xfa, 0x47, 0x3d, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x67, 0x68, 0xfd, 0xfd, 0xed, 0x04,
-	0x00, 0x00,
+	// 615 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x6b, 0xd4, 0x4c,
+	0x14, 0xde, 0xec, 0xb6, 0xdb, 0xdd, 0xd3, 0xed, 0x07, 0xf3, 0x96, 0x97, 0x10, 0x35, 0x94, 0x88,
+	0x50, 0x10, 0xd3, 0xb2, 0x5e, 0x28, 0x22, 0x62, 0x65, 0x2b, 0x94, 0x6a, 0xad, 0x11, 0xf1, 0xb2,
+	0x4c, 0xb3, 0xc7, 0xcd, 0x60, 0x32, 0x13, 0x33, 0x93, 0x85, 0xbd, 0xf3, 0x27, 0xf8, 0x33, 0xfc,
+	0x29, 0xbd, 0xf4, 0xd2, 0x4b, 0xbb, 0xfe, 0x0e, 0x41, 0x32, 0x93, 0xec, 0x47, 0x28, 0x8a, 0xe0,
+	0x5d, 0x9e, 0x73, 0xce, 0x73, 0xe6, 0x3c, 0xe7, 0x23, 0xd0, 0xa5, 0x29, 0xf3, 0xd3, 0x4c, 0x28,
+	0x41, 0x7a, 0x43, 0x1c, 0xb3, 0x10, 0xd3, 0x38, 0x1f, 0x31, 0xee, 0xdc, 0x1b, 0x31, 0x15, 0xe5,
+	0x17, 0x7e, 0x28, 0x92, 0xfd, 0x91, 0x18, 0x89, 0x7d, 0x1d, 0x74, 0x91, 0xbf, 0xd7, 0x48, 0x03,
+	0xfd, 0x65, 0xc8, 0x5e, 0x0c, 0x5b, 0x01, 0x8e, 0x98, 0x54, 0x98, 0x05, 0xf8, 0x31, 0x47, 0xa9,
+	0x88, 0x0d, 0x6b, 0x63, 0xcc, 0x24, 0x13, 0xdc, 0xb6, 0x76, 0xad, 0xbd, 0x6e, 0x50, 0x41, 0xe2,
+	0x40, 0x07, 0xf9, 0x30, 0x15, 0x8c, 0x2b, 0xbb, 0xa9, 0x5d, 0x33, 0x4c, 0x6e, 0xc3, 0x46, 0x86,
+	0x52, 0xe4, 0x59, 0x88, 0xe7, 0x9c, 0x26, 0x68, 0xb7, 0x74, 0x40, 0xaf, 0x32, 0x9e, 0xd2, 0x04,
+	0xbd, 0x35, 0x58, 0x3d, 0x4a, 0x52, 0x35, 0xf1, 0x9e, 0xc3, 0xce, 0x0b, 0x26, 0xd5, 0x21, 0x1f,
+	0xbe, 0xa3, 0x2a, 0x8c, 0x02, 0x94, 0xa9, 0xe0, 0x12, 0x89, 0x0f, 0x6b, 0x46, 0x8d, 0xb4, 0xad,
+	0xdd, 0xd6, 0xde, 0x7a, 0x7f, 0xc7, 0x5f, 0x54, 0xe7, 0x0f, 0x34, 0x08, 0xaa, 0x20, 0xef, 0x00,
+	0xda, 0xc6, 0x44, 0x36, 0xa1, 0x79, 0x3c, 0x28, 0x0b, 0x6e, 0xb2, 0x01, 0xf9, 0x1f, 0xda, 0x11,
+	0xd2, 0x58, 0x45, 0x65, 0xa5, 0x25, 0xf2, 0x10, 0xb6, 0x0e, 0xe3, 0x58, 0x84, 0x54, 0x61, 0x25,
+	0xd8, 0x05, 0x28, 0xf3, 0x1d, 0x0f, 0xcc, 0xbb, 0xdd, 0x60, 0xc1, 0x52, 0xa4, 0x4a, 0xc5, 0xf0,
+	0xed, 0xf1, 0xa0, 0x4a, 0x65, 0x50, 0xd1, 0x8e, 0x50, 0x70, 0x75, 0x3a, 0x57, 0x3b, 0xc3, 0xde,
+	0xcf, 0x26, 0x6c, 0xcf, 0xdf, 0x29, 0xd5, 0x3d, 0x86, 0x15, 0xe4, 0xe3, 0x4a, 0xda, 0xde, 0xb2,
+	0xb4, 0x7a, 0xb4, 0x7f, 0xc4, 0xc7, 0xf2, 0x88, 0xab, 0x6c, 0x12, 0x68, 0x16, 0xb9, 0x0b, 0xed,
+	0x44, 0xe4, 0x5c, 0x49, 0xbb, 0xa9, 0xf9, 0xff, 0x2d, 0xf3, 0x5f, 0x16, 0xbe, 0xa0, 0x0c, 0x21,
+	0xfd, 0x79, 0x23, 0x5b, 0x3a, 0xda, 0xbe, 0xae, 0x91, 0x6f, 0x52, 0x0c, 0x67, 0xcd, 0x24, 0xaf,
+	0x61, 0x9d, 0x72, 0x2e, 0x14, 0x55, 0x4c, 0x70, 0x69, 0xaf, 0x68, 0xde, 0xfe, 0x1f, 0xaa, 0x3c,
+	0x9c, 0x33, 0x4c, 0xb1, 0x8b, 0x39, 0x9c, 0x07, 0xd0, 0x9d, 0xc9, 0x20, 0xdb, 0xd0, 0xfa, 0x80,
+	0x93, 0x72, 0x46, 0xc5, 0x27, 0xd9, 0x81, 0xd5, 0x31, 0x8d, 0x73, 0x2c, 0x1b, 0x6b, 0xc0, 0xa3,
+	0xe6, 0x43, 0xcb, 0x79, 0x02, 0xdb, 0xf5, 0xcc, 0x7f, 0xc3, 0xf7, 0x22, 0x58, 0xd5, 0x0d, 0x21,
+	0x77, 0x60, 0xb3, 0x18, 0x0a, 0x65, 0x1c, 0xb3, 0xf3, 0x94, 0xaa, 0xa8, 0xe4, 0x6f, 0xcc, 0xac,
+	0x67, 0x54, 0x45, 0xe4, 0x06, 0x74, 0x23, 0x21, 0x95, 0x89, 0x28, 0x77, 0xbb, 0x30, 0x54, 0xce,
+	0x0c, 0xe9, 0xf0, 0x5c, 0xf0, 0x78, 0xa2, 0x27, 0xdd, 0x09, 0x3a, 0x85, 0xe1, 0x15, 0x8f, 0x27,
+	0x5e, 0x06, 0x30, 0x6f, 0xe6, 0x3f, 0x79, 0x6e, 0x17, 0xd6, 0x53, 0xcc, 0x12, 0x26, 0xa5, 0x9e,
+	0x83, 0x59, 0xad, 0x45, 0x53, 0xff, 0x0c, 0x7a, 0xe6, 0x6a, 0x33, 0xdd, 0x1f, 0xf2, 0x14, 0x3a,
+	0xd5, 0x15, 0x93, 0x5b, 0xcb, 0x03, 0xab, 0x5d, 0xb7, 0x53, 0xdb, 0x1a, 0x73, 0x8e, 0x8d, 0xfe,
+	0x17, 0x0b, 0x7a, 0x46, 0xc6, 0x99, 0x76, 0x90, 0x13, 0xe8, 0x2d, 0x5e, 0x28, 0xb9, 0x8e, 0xe7,
+	0x78, 0xcb, 0xc6, 0xeb, 0x4e, 0xda, 0x6b, 0x1c, 0x58, 0xe4, 0x04, 0x3a, 0xd5, 0xe2, 0xd4, 0xeb,
+	0xab, 0x1d, 0xa3, 0xe3, 0xfe, 0x7e, 0xdf, 0xbc, 0xc6, 0xb3, 0x9b, 0x97, 0x57, 0xae, 0xf5, 0xed,
+	0xca, 0x6d, 0x7c, 0x9a, 0xba, 0xd6, 0xe5, 0xd4, 0xb5, 0xbe, 0x4e, 0x5d, 0xeb, 0xfb, 0xd4, 0xb5,
+	0x3e, 0xff, 0x70, 0x1b, 0x17, 0x6d, 0xfd, 0x5f, 0xbb, 0xff, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xac,
+	0xf2, 0xb7, 0x03, 0x21, 0x05, 0x00, 0x00,
 }
diff --git a/pkg/kubelet/apis/deviceplugin/v1alpha/api.proto b/pkg/kubelet/apis/deviceplugin/v1alpha/api.proto
index 3198a0d..a5794bb 100644
--- a/pkg/kubelet/apis/deviceplugin/v1alpha/api.proto
+++ b/pkg/kubelet/apis/deviceplugin/v1alpha/api.proto
@@ -79,6 +79,8 @@ message Device {
 //   the Devices requested
 message AllocateRequest {
 	repeated string devicesIDs = 1;
+	string podUID = 2;
+	string contName = 3; 
 }
 
 // AllocateResponse includes the artifacts that needs to be injected into
diff --git a/pkg/kubelet/apis/deviceplugin/v1beta1/api.pb.go b/pkg/kubelet/apis/deviceplugin/v1beta1/api.pb.go
index 2aeb99f..f2a329b 100644
--- a/pkg/kubelet/apis/deviceplugin/v1beta1/api.pb.go
+++ b/pkg/kubelet/apis/deviceplugin/v1beta1/api.pb.go
@@ -235,6 +235,8 @@ func (m *AllocateRequest) GetContainerRequests() []*ContainerAllocateRequest {
 
 type ContainerAllocateRequest struct {
 	DevicesIDs []string `protobuf:"bytes,1,rep,name=devicesIDs" json:"devicesIDs,omitempty"`
+	PodUID     string   `protobuf:"bytes,2,opt,name=podUID,proto3" json:"podUID,omitempty"`
+	ContName   string   `protobuf:"bytes,3,opt,name=contName,proto3" json:"contName,omitempty"`
 }
 
 func (m *ContainerAllocateRequest) Reset()                    { *m = ContainerAllocateRequest{} }
@@ -248,6 +250,20 @@ func (m *ContainerAllocateRequest) GetDevicesIDs() []string {
 	return nil
 }
 
+func (m *ContainerAllocateRequest) GetPodUID() string {
+	if m != nil {
+		return m.PodUID
+	}
+	return ""
+}
+
+func (m *ContainerAllocateRequest) GetContName() string {
+	if m != nil {
+		return m.ContName
+	}
+	return ""
+}
+
 // AllocateResponse includes the artifacts that needs to be injected into
 // a container for accessing 'deviceIDs' that were mentioned as part of
 // 'AllocateRequest'.
@@ -952,6 +968,18 @@ func (m *ContainerAllocateRequest) MarshalTo(dAtA []byte) (int, error) {
 			i += copy(dAtA[i:], s)
 		}
 	}
+	if len(m.PodUID) > 0 {
+		dAtA[i] = 0x12
+		i++
+		i = encodeVarintApi(dAtA, i, uint64(len(m.PodUID)))
+		i += copy(dAtA[i:], m.PodUID)
+	}
+	if len(m.ContName) > 0 {
+		dAtA[i] = 0x1a
+		i++
+		i = encodeVarintApi(dAtA, i, uint64(len(m.ContName)))
+		i += copy(dAtA[i:], m.ContName)
+	}
 	return i, nil
 }
 
@@ -1266,6 +1294,14 @@ func (m *ContainerAllocateRequest) Size() (n int) {
 			n += 1 + l + sovApi(uint64(l))
 		}
 	}
+	l = len(m.PodUID)
+	if l > 0 {
+		n += 1 + l + sovApi(uint64(l))
+	}
+	l = len(m.ContName)
+	if l > 0 {
+		n += 1 + l + sovApi(uint64(l))
+	}
 	return n
 }
 
@@ -1451,6 +1487,8 @@ func (this *ContainerAllocateRequest) String() string {
 	}
 	s := strings.Join([]string{`&ContainerAllocateRequest{`,
 		`DevicesIDs:` + fmt.Sprintf("%v", this.DevicesIDs) + `,`,
+		`PodUID:` + fmt.Sprintf("%v", this.PodUID) + `,`,
+		`ContName:` + fmt.Sprintf("%v", this.ContName) + `,`,
 		`}`,
 	}, "")
 	return s
@@ -2277,6 +2315,64 @@ func (m *ContainerAllocateRequest) Unmarshal(dAtA []byte) error {
 			}
 			m.DevicesIDs = append(m.DevicesIDs, string(dAtA[iNdEx:postIndex]))
 			iNdEx = postIndex
+		case 2:
+			if wireType != 2 {
+				return fmt.Errorf("proto: wrong wireType = %d for field PodUID", wireType)
+			}
+			var stringLen uint64
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowApi
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				stringLen |= (uint64(b) & 0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+			intStringLen := int(stringLen)
+			if intStringLen < 0 {
+				return ErrInvalidLengthApi
+			}
+			postIndex := iNdEx + intStringLen
+			if postIndex > l {
+				return io.ErrUnexpectedEOF
+			}
+			m.PodUID = string(dAtA[iNdEx:postIndex])
+			iNdEx = postIndex
+		case 3:
+			if wireType != 2 {
+				return fmt.Errorf("proto: wrong wireType = %d for field ContName", wireType)
+			}
+			var stringLen uint64
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowApi
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				stringLen |= (uint64(b) & 0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+			intStringLen := int(stringLen)
+			if intStringLen < 0 {
+				return ErrInvalidLengthApi
+			}
+			postIndex := iNdEx + intStringLen
+			if postIndex > l {
+				return io.ErrUnexpectedEOF
+			}
+			m.ContName = string(dAtA[iNdEx:postIndex])
+			iNdEx = postIndex
 		default:
 			iNdEx = preIndex
 			skippy, err := skipApi(dAtA[iNdEx:])
@@ -3096,53 +3192,54 @@ var (
 func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }
 
 var fileDescriptorApi = []byte{
-	// 760 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
-	0x14, 0x8e, 0x13, 0xc8, 0xcf, 0x49, 0x80, 0x30, 0x20, 0x64, 0x0c, 0xd7, 0xca, 0xf5, 0xd5, 0xbd,
-	0xe2, 0x4a, 0x10, 0x20, 0x48, 0xdc, 0x2b, 0x16, 0x55, 0x53, 0x42, 0x5b, 0xa4, 0xb6, 0x44, 0x46,
-	0x55, 0x37, 0x95, 0x22, 0xc7, 0x99, 0xc6, 0x56, 0x93, 0x19, 0xd7, 0x33, 0x89, 0x94, 0x5d, 0x17,
-	0x7d, 0x80, 0x3e, 0x44, 0x1f, 0xa3, 0x0f, 0xc0, 0xb2, 0xcb, 0x2e, 0x4b, 0xfa, 0x22, 0x95, 0xc7,
-	0x1e, 0x3b, 0x32, 0x01, 0x5a, 0xa9, 0x3b, 0xcf, 0x77, 0xce, 0xf7, 0xcd, 0x39, 0x67, 0x4e, 0xbe,
-	0x40, 0xc9, 0xf2, 0xdc, 0xba, 0xe7, 0x53, 0x4e, 0x51, 0x61, 0x7c, 0xd8, 0xc5, 0xdc, 0x3a, 0xd4,
-	0xf6, 0xfa, 0x2e, 0x77, 0x46, 0xdd, 0xba, 0x4d, 0x87, 0xfb, 0x7d, 0xda, 0xa7, 0xfb, 0x22, 0xde,
-	0x1d, 0xbd, 0x11, 0x27, 0x71, 0x10, 0x5f, 0x21, 0xcf, 0x38, 0x85, 0xb5, 0x16, 0x1e, 0xbb, 0x36,
-	0x6e, 0x0f, 0x46, 0x7d, 0x97, 0x5c, 0x78, 0xdc, 0xa5, 0x84, 0xa1, 0x5d, 0x40, 0x9e, 0x8f, 0x3b,
-	0x8c, 0x5b, 0x3e, 0xef, 0xf8, 0xf8, 0xdd, 0xc8, 0xf5, 0x71, 0x4f, 0x55, 0x6a, 0xca, 0x4e, 0xd1,
-	0xac, 0x7a, 0x3e, 0xbe, 0x0c, 0x02, 0x66, 0x84, 0x1b, 0x9f, 0x14, 0x58, 0x31, 0x71, 0xdf, 0x65,
-	0x1c, 0xfb, 0x01, 0x88, 0x19, 0x47, 0x2a, 0x14, 0xc6, 0xd8, 0x67, 0x2e, 0x25, 0x82, 0x56, 0x32,
-	0xe5, 0x11, 0x69, 0x50, 0xc4, 0xa4, 0xe7, 0x51, 0x97, 0x70, 0x35, 0x2b, 0x42, 0xf1, 0x19, 0xfd,
-	0x05, 0x4b, 0x3e, 0x66, 0x74, 0xe4, 0xdb, 0xb8, 0x43, 0xac, 0x21, 0x56, 0x73, 0x22, 0xa1, 0x22,
-	0xc1, 0x17, 0xd6, 0x10, 0xa3, 0x63, 0x28, 0xd0, 0xb0, 0x4e, 0x75, 0xa1, 0xa6, 0xec, 0x94, 0x1b,
-	0xdb, 0xf5, 0xa8, 0xfb, 0xfa, 0x9c, 0x5e, 0x4c, 0x99, 0x6c, 0x14, 0x60, 0xf1, 0x6c, 0xe8, 0xf1,
-	0x89, 0xd1, 0x84, 0xf5, 0x67, 0x2e, 0xe3, 0x4d, 0xd2, 0x7b, 0x65, 0x71, 0xdb, 0x31, 0x31, 0xf3,
-	0x28, 0x61, 0x18, 0xfd, 0x0b, 0x85, 0x9e, 0x10, 0x60, 0xaa, 0x52, 0xcb, 0xed, 0x94, 0x1b, 0x2b,
-	0x29, 0x61, 0x53, 0xc6, 0x8d, 0x03, 0xc8, 0x87, 0x10, 0x5a, 0x86, 0xec, 0x79, 0x2b, 0xea, 0x31,
-	0xeb, 0xb6, 0xd0, 0x06, 0xe4, 0x1d, 0x6c, 0x0d, 0xb8, 0x13, 0x35, 0x17, 0x9d, 0x8c, 0x13, 0x50,
-	0xdb, 0xd1, 0xe0, 0x4e, 0x29, 0xe1, 0x96, 0x4b, 0x92, 0x61, 0xe9, 0x00, 0x91, 0xf0, 0x79, 0x2b,
-	0xbc, 0xbb, 0x64, 0xce, 0x20, 0xc6, 0x16, 0x6c, 0xce, 0xe1, 0x86, 0x55, 0x1b, 0x36, 0xac, 0x34,
-	0x07, 0x03, 0x6a, 0x5b, 0x1c, 0x4b, 0xbd, 0x36, 0x20, 0x5b, 0xe6, 0x89, 0xe7, 0xc3, 0x8c, 0xcb,
-	0x9e, 0xfe, 0x8c, 0x7b, 0x8a, 0xa5, 0x52, 0x74, 0x73, 0xd5, 0x4e, 0x15, 0xc8, 0x82, 0xea, 0x6f,
-	0x4b, 0xbf, 0xb7, 0xfa, 0x3e, 0x54, 0x13, 0x4a, 0x34, 0xea, 0x4b, 0x58, 0x9b, 0xad, 0x30, 0x44,
-	0x65, 0x89, 0xc6, 0x5d, 0x25, 0x86, 0xa9, 0x26, 0xb2, 0xd3, 0x83, 0x60, 0xc6, 0x87, 0x1c, 0x6c,
-	0xde, 0xca, 0x40, 0x0f, 0x61, 0x01, 0x93, 0xb1, 0xbc, 0x63, 0xf7, 0xfe, 0x3b, 0xea, 0x67, 0x64,
-	0xcc, 0xce, 0x08, 0xf7, 0x27, 0xa6, 0x60, 0xa2, 0x7f, 0x20, 0x3f, 0xa4, 0x23, 0xc2, 0x99, 0x9a,
-	0x15, 0x1a, 0xcb, 0xb1, 0xc6, 0xf3, 0x00, 0x36, 0xa3, 0x28, 0xda, 0x4b, 0xf6, 0x28, 0x27, 0x12,
-	0xd7, 0x52, 0x7b, 0x74, 0xe9, 0x61, 0x3b, 0xde, 0x25, 0xf4, 0x12, 0xca, 0x16, 0x21, 0x94, 0x5b,
-	0x72, 0xa7, 0x03, 0xca, 0xd1, 0x4f, 0xd4, 0xd7, 0x4c, 0x58, 0x61, 0x99, 0xb3, 0x3a, 0xda, 0x7f,
-	0x50, 0x8a, 0x1b, 0x40, 0x55, 0xc8, 0xbd, 0xc5, 0x93, 0x68, 0x4d, 0x83, 0x4f, 0xb4, 0x0e, 0x8b,
-	0x63, 0x6b, 0x30, 0xc2, 0xd1, 0x9a, 0x86, 0x87, 0x93, 0xec, 0xff, 0x8a, 0xf6, 0x00, 0xaa, 0x69,
-	0xe5, 0x5f, 0xe1, 0x1b, 0x0e, 0x2c, 0x8a, 0x79, 0xa0, 0xbf, 0x61, 0x39, 0x79, 0x64, 0xcf, 0xe2,
-	0x4e, 0xc4, 0x5f, 0x8a, 0xd1, 0xb6, 0xc5, 0x1d, 0xb4, 0x05, 0x25, 0x87, 0x32, 0x1e, 0x66, 0x44,
-	0x8e, 0x10, 0x00, 0x32, 0xe8, 0x63, 0xab, 0xd7, 0xa1, 0x64, 0x30, 0x11, 0x6e, 0x50, 0x34, 0x8b,
-	0x01, 0x70, 0x41, 0x06, 0x13, 0xc3, 0x07, 0x48, 0x06, 0xfa, 0x5b, 0xae, 0xab, 0x41, 0xd9, 0xc3,
-	0xfe, 0xd0, 0x65, 0x4c, 0xbc, 0x45, 0x68, 0x3f, 0xb3, 0x50, 0xe3, 0x31, 0x54, 0x42, 0xaf, 0xf3,
-	0xc5, 0x7c, 0xd0, 0x31, 0x14, 0xa5, 0xf7, 0x21, 0x35, 0x7e, 0xb4, 0x94, 0x1d, 0x6a, 0xc9, 0xaa,
-	0x84, 0x16, 0x94, 0x69, 0x7c, 0xce, 0x42, 0x65, 0xd6, 0xae, 0xd0, 0x53, 0xd8, 0x78, 0x82, 0xf9,
-	0x3c, 0x37, 0x4e, 0x91, 0xb5, 0x3b, 0xfd, 0xce, 0xc8, 0xa0, 0x26, 0x54, 0x66, 0xfd, 0xed, 0x06,
-	0xff, 0x8f, 0xf8, 0x3c, 0xcf, 0x06, 0x8d, 0xcc, 0x81, 0x82, 0x9a, 0x50, 0x94, 0xeb, 0x36, 0xd3,
-	0x55, 0xea, 0x97, 0xaf, 0x6d, 0xce, 0x89, 0x48, 0x11, 0xf4, 0x1a, 0x56, 0x6f, 0x98, 0x16, 0x4a,
-	0xdc, 0xe7, 0x36, 0x33, 0xd4, 0x8c, 0xbb, 0x52, 0xa4, 0xfa, 0xa3, 0xed, 0xab, 0x6b, 0x5d, 0xf9,
-	0x7a, 0xad, 0x67, 0xde, 0x4f, 0x75, 0xe5, 0x6a, 0xaa, 0x2b, 0x5f, 0xa6, 0xba, 0xf2, 0x6d, 0xaa,
-	0x2b, 0x1f, 0xbf, 0xeb, 0x99, 0x6e, 0x5e, 0xfc, 0xbb, 0x1d, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff,
-	0xb9, 0xc2, 0x87, 0x92, 0x22, 0x07, 0x00, 0x00,
+	// 780 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x4e, 0xeb, 0x46,
+	0x14, 0x8e, 0x13, 0xc8, 0xcf, 0x49, 0x80, 0x30, 0x20, 0x64, 0x0c, 0xb5, 0xd2, 0xa9, 0x5a, 0x51,
+	0x09, 0x02, 0x04, 0x89, 0x56, 0x2c, 0xaa, 0xa6, 0x84, 0xb6, 0x48, 0x2d, 0x44, 0x46, 0xa8, 0x9b,
+	0x4a, 0x91, 0xe3, 0x4c, 0x63, 0xab, 0xc9, 0x8c, 0xeb, 0x99, 0x44, 0xca, 0xae, 0x8b, 0x3e, 0x40,
+	0x1f, 0xa2, 0x8f, 0xd1, 0x07, 0x60, 0xd9, 0x65, 0x97, 0x97, 0xdc, 0x17, 0xb9, 0xf2, 0xd8, 0x63,
+	0x47, 0x26, 0xc0, 0xbd, 0xd2, 0xdd, 0xf9, 0xfc, 0x7c, 0x67, 0xce, 0x77, 0xce, 0xc9, 0x17, 0xa8,
+	0xd8, 0xbe, 0xd7, 0xf4, 0x03, 0x26, 0x18, 0x2a, 0x4d, 0x4f, 0xfb, 0x44, 0xd8, 0xa7, 0xc6, 0xd1,
+	0xd0, 0x13, 0xee, 0xa4, 0xdf, 0x74, 0xd8, 0xf8, 0x78, 0xc8, 0x86, 0xec, 0x58, 0xc6, 0xfb, 0x93,
+	0xdf, 0xa4, 0x25, 0x0d, 0xf9, 0x15, 0xe1, 0xf0, 0x25, 0x6c, 0x75, 0xc8, 0xd4, 0x73, 0x48, 0x77,
+	0x34, 0x19, 0x7a, 0xf4, 0xd6, 0x17, 0x1e, 0xa3, 0x1c, 0x1d, 0x02, 0xf2, 0x03, 0xd2, 0xe3, 0xc2,
+	0x0e, 0x44, 0x2f, 0x20, 0x7f, 0x4c, 0xbc, 0x80, 0x0c, 0x74, 0xad, 0xa1, 0x1d, 0x94, 0xad, 0xba,
+	0x1f, 0x90, 0xbb, 0x30, 0x60, 0xc5, 0x7e, 0xfc, 0x8f, 0x06, 0x1b, 0x16, 0x19, 0x7a, 0x5c, 0x90,
+	0x20, 0x74, 0x12, 0x2e, 0x90, 0x0e, 0xa5, 0x29, 0x09, 0xb8, 0xc7, 0xa8, 0x84, 0x55, 0x2c, 0x65,
+	0x22, 0x03, 0xca, 0x84, 0x0e, 0x7c, 0xe6, 0x51, 0xa1, 0xe7, 0x65, 0x28, 0xb1, 0xd1, 0x67, 0xb0,
+	0x16, 0x10, 0xce, 0x26, 0x81, 0x43, 0x7a, 0xd4, 0x1e, 0x13, 0xbd, 0x20, 0x13, 0x6a, 0xca, 0x79,
+	0x63, 0x8f, 0x09, 0x3a, 0x87, 0x12, 0x8b, 0xfa, 0xd4, 0x57, 0x1a, 0xda, 0x41, 0xb5, 0xb5, 0xdf,
+	0x8c, 0xd9, 0x37, 0x97, 0x70, 0xb1, 0x54, 0x32, 0x2e, 0xc1, 0xea, 0xd5, 0xd8, 0x17, 0x33, 0xdc,
+	0x86, 0xed, 0x9f, 0x3c, 0x2e, 0xda, 0x74, 0xf0, 0x8b, 0x2d, 0x1c, 0xd7, 0x22, 0xdc, 0x67, 0x94,
+	0x13, 0xf4, 0x25, 0x94, 0x06, 0xb2, 0x00, 0xd7, 0xb5, 0x46, 0xe1, 0xa0, 0xda, 0xda, 0xc8, 0x14,
+	0xb6, 0x54, 0x1c, 0x9f, 0x40, 0x31, 0x72, 0xa1, 0x75, 0xc8, 0x5f, 0x77, 0x62, 0x8e, 0x79, 0xaf,
+	0x83, 0x76, 0xa0, 0xe8, 0x12, 0x7b, 0x24, 0xdc, 0x98, 0x5c, 0x6c, 0xe1, 0x0b, 0xd0, 0xbb, 0xf1,
+	0xe0, 0x2e, 0x19, 0x15, 0xb6, 0x47, 0xd3, 0x61, 0x99, 0x00, 0x71, 0xe1, 0xeb, 0x4e, 0xf4, 0x76,
+	0xc5, 0x5a, 0xf0, 0xe0, 0x3d, 0xd8, 0x5d, 0x82, 0x8d, 0xba, 0xc6, 0x0e, 0x6c, 0xb4, 0x47, 0x23,
+	0xe6, 0xd8, 0x82, 0xa8, 0x7a, 0x5d, 0x40, 0x8e, 0xca, 0x93, 0xeb, 0x23, 0x5c, 0x28, 0x4e, 0x9f,
+	0x26, 0x9c, 0x92, 0x52, 0x19, 0xb8, 0xb5, 0xe9, 0x64, 0x1a, 0xe4, 0x98, 0x82, 0xfe, 0x5c, 0xfa,
+	0x6b, 0xdd, 0x87, 0x13, 0xf1, 0xd9, 0xe0, 0xfe, 0xba, 0xa3, 0x26, 0x12, 0x59, 0xe1, 0x21, 0x84,
+	0x0f, 0xdd, 0xa4, 0x7b, 0x4e, 0x6c, 0x3c, 0x84, 0x7a, 0xfa, 0x4c, 0xbc, 0x9e, 0x3b, 0xd8, 0x5a,
+	0x64, 0x15, 0x79, 0x15, 0x2d, 0xfc, 0x12, 0xad, 0x28, 0xd5, 0x42, 0x4e, 0x76, 0x78, 0x1c, 0xff,
+	0x55, 0x80, 0xdd, 0x67, 0x11, 0xe8, 0x5b, 0x58, 0x21, 0x74, 0xaa, 0xde, 0x38, 0x7c, 0xfd, 0x8d,
+	0xe6, 0x15, 0x9d, 0xf2, 0x2b, 0x2a, 0x82, 0x99, 0x25, 0x91, 0xe8, 0x0b, 0x28, 0x8e, 0xd9, 0x84,
+	0x0a, 0xae, 0xe7, 0x65, 0x8d, 0xf5, 0xa4, 0xc6, 0xcf, 0xa1, 0xdb, 0x8a, 0xa3, 0xe8, 0x28, 0xbd,
+	0xbd, 0x82, 0x4c, 0xdc, 0xca, 0xdc, 0xde, 0x9d, 0x4f, 0x9c, 0xe4, 0xfe, 0xd0, 0x3d, 0x54, 0x6d,
+	0x4a, 0x99, 0xb0, 0xd5, 0xef, 0x20, 0x84, 0x9c, 0xbd, 0x47, 0x7f, 0xed, 0x14, 0x15, 0xb5, 0xb9,
+	0x58, 0xc7, 0xf8, 0x0a, 0x2a, 0x09, 0x01, 0x54, 0x87, 0xc2, 0xef, 0x64, 0x16, 0x9f, 0x76, 0xf8,
+	0x89, 0xb6, 0x61, 0x75, 0x6a, 0x8f, 0x26, 0x24, 0x5e, 0x64, 0x64, 0x5c, 0xe4, 0xbf, 0xd6, 0x8c,
+	0x6f, 0xa0, 0x9e, 0xad, 0xfc, 0x21, 0x78, 0xec, 0xc2, 0xaa, 0x9c, 0x07, 0xfa, 0x1c, 0xd6, 0xd3,
+	0x25, 0xfb, 0xb6, 0x70, 0x63, 0xfc, 0x5a, 0xe2, 0xed, 0xda, 0xc2, 0x45, 0x7b, 0x50, 0x71, 0x19,
+	0x17, 0x51, 0x46, 0xac, 0x22, 0xa1, 0x43, 0x05, 0x03, 0x62, 0x0f, 0x7a, 0x8c, 0x8e, 0x66, 0xf2,
+	0xb2, 0xca, 0x56, 0x39, 0x74, 0xdc, 0xd2, 0xd1, 0x0c, 0x07, 0x00, 0xe9, 0x40, 0x3f, 0xca, 0x73,
+	0x0d, 0xa8, 0xfa, 0x24, 0x18, 0x7b, 0x9c, 0xcb, 0x5d, 0x44, 0xa7, 0xbc, 0xe8, 0x6a, 0x7d, 0x0f,
+	0xb5, 0x48, 0x1f, 0x03, 0x39, 0x1f, 0x74, 0x0e, 0x65, 0xa5, 0x97, 0x48, 0x4f, 0x96, 0x96, 0x91,
+	0x50, 0x23, 0x3d, 0x95, 0x48, 0xb6, 0x72, 0xad, 0x7f, 0xf3, 0x50, 0x5b, 0x94, 0x38, 0xf4, 0x23,
+	0xec, 0xfc, 0x40, 0xc4, 0x32, 0x05, 0xcf, 0x80, 0x8d, 0x17, 0x35, 0x12, 0xe7, 0x50, 0x1b, 0x6a,
+	0x8b, 0x9a, 0xf8, 0x04, 0xff, 0x49, 0x62, 0x2f, 0x93, 0x4e, 0x9c, 0x3b, 0xd1, 0x50, 0x1b, 0xca,
+	0xea, 0xdc, 0x16, 0x58, 0x65, 0xd4, 0xc2, 0xd8, 0x5d, 0x12, 0x51, 0x45, 0xd0, 0xaf, 0xb0, 0xf9,
+	0x44, 0xe8, 0x50, 0xaa, 0x58, 0xcf, 0x09, 0xa8, 0x81, 0x5f, 0x4a, 0x51, 0xd5, 0xbf, 0xdb, 0x7f,
+	0x78, 0x34, 0xb5, 0xff, 0x1f, 0xcd, 0xdc, 0x9f, 0x73, 0x53, 0x7b, 0x98, 0x9b, 0xda, 0x7f, 0x73,
+	0x53, 0x7b, 0x33, 0x37, 0xb5, 0xbf, 0xdf, 0x9a, 0xb9, 0x7e, 0x51, 0xfe, 0x23, 0x9e, 0xbd, 0x0b,
+	0x00, 0x00, 0xff, 0xff, 0xe4, 0x17, 0x56, 0x73, 0x56, 0x07, 0x00, 0x00,
 }
diff --git a/pkg/kubelet/apis/deviceplugin/v1beta1/api.proto b/pkg/kubelet/apis/deviceplugin/v1beta1/api.proto
index efbd72c..78d8307 100644
--- a/pkg/kubelet/apis/deviceplugin/v1beta1/api.proto
+++ b/pkg/kubelet/apis/deviceplugin/v1beta1/api.proto
@@ -111,6 +111,8 @@ message AllocateRequest {
 
 message ContainerAllocateRequest {
 	repeated string devicesIDs = 1;
+	string podUID = 2;
+	string contName = 3; 
 }
 
 // AllocateResponse includes the artifacts that needs to be injected into
diff --git a/pkg/kubelet/cm/devicemanager/endpoint.go b/pkg/kubelet/cm/devicemanager/endpoint.go
index 3ed35a1..6e03ef5 100644
--- a/pkg/kubelet/cm/devicemanager/endpoint.go
+++ b/pkg/kubelet/cm/devicemanager/endpoint.go
@@ -35,7 +35,7 @@ import (
 type endpoint interface {
 	run()
 	stop()
-	allocate(devs []string) (*pluginapi.AllocateResponse, error)
+	allocate(devs []string, podUID string, contName string) (*pluginapi.AllocateResponse, error)
 	preStartContainer(devs []string) (*pluginapi.PreStartContainerResponse, error)
 	getDevices() []pluginapi.Device
 	callback(resourceName string, added, updated, deleted []pluginapi.Device)
@@ -210,13 +210,16 @@ func (e *endpointImpl) setStopTime(t time.Time) {
 }
 
 // allocate issues Allocate gRPC call to the device plugin.
-func (e *endpointImpl) allocate(devs []string) (*pluginapi.AllocateResponse, error) {
+func (e *endpointImpl) allocate(devs []string,  podUID string, contName string) (*pluginapi.AllocateResponse, error) {
 	if e.isStopped() {
 		return nil, fmt.Errorf(errEndpointStopped, e)
 	}
+	glog.Infof("Endpoint Allocate Call. PodUID: %v, Container Name: %v", podUID, contName)
 	return e.client.Allocate(context.Background(), &pluginapi.AllocateRequest{
 		ContainerRequests: []*pluginapi.ContainerAllocateRequest{
-			{DevicesIDs: devs},
+			{DevicesIDs: devs,
+			PodUID: podUID,
+			ContName: contName,},
 		},
 	})
 }
diff --git a/pkg/kubelet/cm/devicemanager/manager.go b/pkg/kubelet/cm/devicemanager/manager.go
index f415181..73eb2bd 100644
--- a/pkg/kubelet/cm/devicemanager/manager.go
+++ b/pkg/kubelet/cm/devicemanager/manager.go
@@ -641,7 +641,7 @@ func (m *ManagerImpl) allocateContainerResources(pod *v1.Pod, container *v1.Cont
 		// TODO: refactor this part of code to just append a ContainerAllocationRequest
 		// in a passed in AllocateRequest pointer, and issues a single Allocate call per pod.
 		glog.V(3).Infof("Making allocation request for devices %v for device plugin %s", devs, resource)
-		resp, err := e.allocate(devs)
+		resp, err := e.allocate(devs, podUID, contName)
 		metrics.DevicePluginAllocationLatency.WithLabelValues(resource).Observe(metrics.SinceInMicroseconds(startRPCTime))
 		if err != nil {
 			// In case of allocation failure, we want to restore m.allocatedDevices
