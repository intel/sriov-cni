package sriov

import (
	"encoding/json"
	"fmt"

	"github.com/containernetworking/cni/pkg/ns"
	sriovtypes "github.com/intel/sriov-cni/pkg/types"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/stretchr/testify/mock"
	"github.com/vishvananda/netlink"
)

// Code generated by mockery v1.0.0. DO NOT EDIT.
// MockNetlinkManager is an autogenerated mock type for the NetlinkManager type
type MockNetlinkManager struct {
	mock.Mock
}

// LinkByName provides a mock function with given fields: _a0
func (_m *MockNetlinkManager) LinkByName(_a0 string) (netlink.Link, error) {
	ret := _m.Called(_a0)

	var r0 netlink.Link
	if rf, ok := ret.Get(0).(func(string) netlink.Link); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkSetVfVlan provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockNetlinkManager) LinkSetVfVlan(_a0 netlink.Link, _a1 int, _a2 int) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int, int) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetUp provides a mock function with given fields: _a0
func (_m *MockNetlinkManager) LinkSetUp(_a0 netlink.Link) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetDown provides a mock function with given fields: _a0
func (_m *MockNetlinkManager) LinkSetDown(_a0 netlink.Link) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetNsFd provides a mock function with given fields: _a0, _a1
func (_m *MockNetlinkManager) LinkSetNsFd(_a0 netlink.Link, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkSetName provides a mock function with given fields: _a0, _a1
func (_m *MockNetlinkManager) LinkSetName(_a0 netlink.Link, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeLink is a dummy netlink struct used during testing
type FakeLink struct {
	netlink.Link
}

var _ = Describe("Sriov", func() {
	Context("Checking setSharedVfVlan function", func() {
		It("Assuming existing interface and vf", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err := setSharedVfVlan("ens1", 1, 1)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming existing interface with not existing vf", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(fmt.Errorf("LinkSetVfVlan failed"))
			nLink = mocked
			err := setSharedVfVlan("ens1", 3, 1)
			Expect(err).To(HaveOccurred())
		})
		It("Assuming not existing interface", func() {
			mocked := &MockNetlinkManager{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(nil, fmt.Errorf("No such interface")).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(fmt.Errorf("LinkSetVfVlan failed"))
			nLink = mocked
			err := setSharedVfVlan("ens2", 0, 0)
			Expect(err).To(HaveOccurred())
		})
	})
	PContext("Checking moveIfToNetns function", func() {
		It("Assuming existing interface", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.GetCurrentNS()
			Expect(err).NotTo(HaveOccurred())
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetUp", mock.AnythingOfType("FakeLink")).Return(nil).
				On("LinkSetNsFd", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			_, err = moveIfToNetns("enp175s0f1", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming not existing interface", func() {
			mocked := &MockNetlinkManager{}
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(nil, fmt.Errorf("No such interface")).
				On("LinkSetUp", mock.AnythingOfType("FakeLink")).Return(fmt.Errorf("LinkSetUp failed")).
				On("LinkSetNsFd", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int")).Return(fmt.Errorf("LinkSetNsFd failed"))
			nLink = mocked
			_, err = moveIfToNetns("enp175s0f2", targetNetNS)
			Expect(err).To(HaveOccurred())
		})
	})
	PContext("Checking SetupVF function", func() {
		It("Assuming existing interface", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f1",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err = SetupVF(&netconf, "enp175s0f1", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming existing interface in dpdk mode", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f1",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
        "dpdk": {
            "kernel_driver":"ixgbevf",
            "dpdk_driver":"igb_uio",
            "dpdk_tool":"/usr/src/dpdk/usertools/dpdk-devbind.py"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err = SetupVF(&netconf, "enp175s0f1", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming existing interface with vlan", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f1",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
        "vlan": 1,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err = SetupVF(&netconf, "enp175s0f1", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming existing shared interface with vlan", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "ens1",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
        "vlan": 1,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err = SetupVF(&netconf, "ens1", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming not existing interface", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f2",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(nil, fmt.Errorf("No such interface")).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(fmt.Errorf("LinkSetVfVlan failed"))
			nLink = mocked
			err = SetupVF(&netconf, "enp175s0f2", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
	})
	PContext("Checking ReleaseVF function", func() {
		It("Assuming existing interface", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f1",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetDown", mock.AnythingOfType("FakeLink")).Return(nil).
				On("LinkSetNsFd", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int")).Return(nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err = ReleaseVF(&netconf, "enp175s0f1", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming existing interface with vlan", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f1",
        "mac":"66:77:88:99:aa:bb",
        "l2enable": "true",
        "vf": 0,
        "vlan": 1,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetDown", mock.AnythingOfType("FakeLink")).Return(nil).
				On("LinkSetNsFd", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int")).Return(nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err = ReleaseVF(&netconf, "enp175s0f1", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming existing interface in dpdk mode", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f1",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
	"dpdk": {
	    "kernel_driver":"ixgbevf",
	    "dpdk_driver":"igb_uio",
	    "dpdk_tool":"/usr/src/dpdk/usertools/dpdk-devbind.py"
	}
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetDown", mock.AnythingOfType("FakeLink")).Return(nil).
				On("LinkSetNsFd", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int")).Return(nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err = ReleaseVF(&netconf, "enp175s0f1", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming existing interface in layer2 mode", func() {
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f1",
        "mac":"66:77:88:99:aa:bb",
        "l2enable": "true",
        "vf": 0,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			var targetNetNS ns.NetNS
			targetNetNS, err := ns.NewNS()
			Expect(err).NotTo(HaveOccurred())
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetDown", mock.AnythingOfType("FakeLink")).Return(nil).
				On("LinkSetNsFd", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int")).Return(nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err = ReleaseVF(&netconf, "enp175s0f1", "dummycid", targetNetNS)
			Expect(err).NotTo(HaveOccurred())
		})
	})
	Context("Checking resetVfVlan function", func() {
		It("Assuming existing interface and vf", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err := resetVfVlan("enp175s0f1", "enp175s6")
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming existing interface with wrong vf", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err := resetVfVlan("enp175s0f1", "dev0")
			Expect(err).To(HaveOccurred())
		})
		It("Assuming existing interface with no vfs", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(nil)
			nLink = mocked
			err := resetVfVlan("ens1", "dev0")
			Expect(err).To(HaveOccurred())
		})
		It("Assuming not existing interface", func() {
			mocked := &MockNetlinkManager{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(nil, fmt.Errorf("No such interface")).
				On("LinkSetVfVlan", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("int"), mock.AnythingOfType("int")).Return(fmt.Errorf("LinkSetVfVlan failed"))
			nLink = mocked
			err := resetVfVlan("enp175s0f2", "enp175s6")
			Expect(err).To(HaveOccurred())
		})
	})
	Context("Checking renameLink function", func() {
		It("Assuming existing interface", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetName", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("string")).Return(nil)
			nLink = mocked
			err := renameLink("enp175s0f1", "enp175s0f9")
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming not existing interface", func() {
			mocked := &MockNetlinkManager{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(nil, fmt.Errorf("No such interface")).
				On("LinkSetName", mock.AnythingOfType("FakeLink"), mock.AnythingOfType("string")).Return(nil)
			nLink = mocked
			err := renameLink("enp175s0f2", "enp175s0f9")
			Expect(err).To(HaveOccurred())
		})
	})
	Context("Checking setUpLink function", func() {
		It("Assuming existing interface", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil).
				On("LinkSetUp", mock.AnythingOfType("FakeLink")).Return(nil)
			nLink = mocked
			err := setUpLink("enp175s0f1")
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming not existing interface", func() {
			mocked := &MockNetlinkManager{}
			mocked.
				On("LinkByName", mock.AnythingOfType("string")).Return(nil, fmt.Errorf("No such interface")).
				On("LinkSetUp", mock.AnythingOfType("FakeLink")).Return(fmt.Errorf("LinkSetUp failed"))
			nLink = mocked
			err := setUpLink("enp175s0f2")
			Expect(err).To(HaveOccurred())
		})
	})
	Context("Checking AssignFreeVF function", func() {
		It("Assuming existing interface", func() {
			mocked := &MockNetlinkManager{}
			fakeLink := FakeLink{}
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f1",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			mocked.On("LinkByName", mock.AnythingOfType("string")).Return(fakeLink, nil)
			nLink = mocked
			err := AssignFreeVF(&netconf)
			Expect(err).NotTo(HaveOccurred())
		})
		It("Assuming not existing interface", func() {
			mocked := &MockNetlinkManager{}
			conf := []byte(`{
        "name": "mynet",
        "type": "sriov",
        "master": "enp175s0f2",
        "mac":"66:77:88:99:aa:bb",
        "vf": 0,
        "ipam": {
            "type": "host-local",
            "subnet": "10.55.206.0/26",
            "routes": [
                { "dst": "0.0.0.0/0" }
            ],
            "gateway": "10.55.206.1"
        }
                        }`)
			var netconf sriovtypes.NetConf
			json.Unmarshal(conf, &netconf)
			mocked.On("LinkByName", mock.AnythingOfType("string")).Return(nil, fmt.Errorf("No such interface"))
			nLink = mocked
			err := AssignFreeVF(&netconf)
			Expect(err).To(HaveOccurred())
		})
	})
})
